{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"asyncio-lifx-scenes","text":"<p>List and activate scenes via the LIFX Cloud.</p>"},{"location":"modules/","title":"Modules","text":"<p>Main module.</p>"},{"location":"modules/#asyncio_lifx_scenes.scenes.LifxCloud","title":"<code>LifxCloud</code>","text":"<p>Class to represent LIFX Cloud access.</p> Source code in <code>src/asyncio_lifx_scenes/scenes.py</code> <pre><code>class LifxCloud:\n    \"\"\"Class to represent LIFX Cloud access.\"\"\"\n\n    def __init__(self, token: str) -&gt; None:\n        \"\"\"Initialize the LIFX scene.\"\"\"\n        self.scenes: list[LifxScene] = []\n        self._auth_token = HeaderApiKey(f\"Bearer {token}\", header_name=\"Authorization\")\n\n    def list_scenes(self) -&gt; list[LifxScene]:\n        \"\"\"Return a list of scenes stored on LIFX Cloud.\"\"\"\n        header = {\"accept\": \"application/json\"}\n\n        with httpx.Client(auth=self._auth_token, timeout=TIMEOUT) as client:\n            resp = client.get(LIFX_URL, headers=header)\n            try:\n                resp.raise_for_status()\n                for scene in resp.json():\n                    self.scenes.append(LifxScene(**scene))\n            except httpx.HTTPStatusError as exc:\n                _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n                return []\n            else:\n                return self.scenes\n\n    async def async_list_scenes(self) -&gt; list[LifxScene]:\n        \"\"\"Asynchronously return a list of scenes stored on LIFX Cloud.\"\"\"\n        header = {\"accept\": \"application/json\"}\n        async with httpx.AsyncClient(auth=self._auth_token, timeout=TIMEOUT) as client:\n            resp = await client.get(LIFX_URL, headers=header)\n            try:\n                resp.raise_for_status()\n                for scene in resp.json():\n                    self.scenes.append(LifxScene(**scene))\n            except httpx.HTTPStatusError as exc:\n                _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n                return []\n            else:\n                return self.scenes\n\n    def activate_scene(\n        self, scene_uuid: str, duration: int = 1, ignore: list[str] | None = None, fast: bool = False\n    ) -&gt; list[dict[str, Any]] | None:\n        \"\"\"Activate a scene by UUID.\"\"\"\n        headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n        }\n\n        payload = {\n            \"duration\": duration,\n            \"ignore\": ignore if ignore is not None else [],\n            \"fast\": fast,\n        }\n\n        with httpx.Client(auth=self._auth_token, timeout=TIMEOUT) as client:\n            resp = client.put(f\"{LIFX_URL}/scene_id:{scene_uuid}/activate\", json=payload, headers=headers)\n            results: list[dict[str, Any]] = []\n\n            try:\n                resp.raise_for_status()\n                if fast:\n                    return None\n                results = resp.json().get(\"results\", None)\n\n            except httpx.HTTPStatusError as exc:\n                _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n\n            return results\n\n    async def async_activate_scene(\n        self, scene_uuid: str, duration: int = 1, ignore: list[str] | None = None, fast: bool = False\n    ) -&gt; list[dict[str, str]] | None:\n        \"\"\"Activate a scene by UUID.\"\"\"\n        headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n        }\n\n        payload = {\n            \"duration\": duration,\n            \"ignore\": ignore if ignore is not None else [],\n            \"fast\": fast,\n        }\n\n        async with httpx.AsyncClient(auth=self._auth_token, timeout=TIMEOUT) as client:\n            resp = await client.put(f\"{LIFX_URL}/scene_id:{scene_uuid}/activate\", json=payload, headers=headers)\n            results: list[dict[str, str]] = []\n\n            try:\n                resp.raise_for_status()\n                if fast:\n                    return None\n                results = resp.json().get(\"results\", None)\n\n            except httpx.HTTPStatusError as exc:\n                _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n\n            return results\n</code></pre>"},{"location":"modules/#asyncio_lifx_scenes.scenes.LifxCloud.__init__","title":"<code>__init__(token)</code>","text":"<p>Initialize the LIFX scene.</p> Source code in <code>src/asyncio_lifx_scenes/scenes.py</code> <pre><code>def __init__(self, token: str) -&gt; None:\n    \"\"\"Initialize the LIFX scene.\"\"\"\n    self.scenes: list[LifxScene] = []\n    self._auth_token = HeaderApiKey(f\"Bearer {token}\", header_name=\"Authorization\")\n</code></pre>"},{"location":"modules/#asyncio_lifx_scenes.scenes.LifxCloud.activate_scene","title":"<code>activate_scene(scene_uuid, duration=1, ignore=None, fast=False)</code>","text":"<p>Activate a scene by UUID.</p> Source code in <code>src/asyncio_lifx_scenes/scenes.py</code> <pre><code>def activate_scene(\n    self, scene_uuid: str, duration: int = 1, ignore: list[str] | None = None, fast: bool = False\n) -&gt; list[dict[str, Any]] | None:\n    \"\"\"Activate a scene by UUID.\"\"\"\n    headers = {\n        \"accept\": \"application/json\",\n        \"content-type\": \"application/json\",\n    }\n\n    payload = {\n        \"duration\": duration,\n        \"ignore\": ignore if ignore is not None else [],\n        \"fast\": fast,\n    }\n\n    with httpx.Client(auth=self._auth_token, timeout=TIMEOUT) as client:\n        resp = client.put(f\"{LIFX_URL}/scene_id:{scene_uuid}/activate\", json=payload, headers=headers)\n        results: list[dict[str, Any]] = []\n\n        try:\n            resp.raise_for_status()\n            if fast:\n                return None\n            results = resp.json().get(\"results\", None)\n\n        except httpx.HTTPStatusError as exc:\n            _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n\n        return results\n</code></pre>"},{"location":"modules/#asyncio_lifx_scenes.scenes.LifxCloud.async_activate_scene","title":"<code>async_activate_scene(scene_uuid, duration=1, ignore=None, fast=False)</code>  <code>async</code>","text":"<p>Activate a scene by UUID.</p> Source code in <code>src/asyncio_lifx_scenes/scenes.py</code> <pre><code>async def async_activate_scene(\n    self, scene_uuid: str, duration: int = 1, ignore: list[str] | None = None, fast: bool = False\n) -&gt; list[dict[str, str]] | None:\n    \"\"\"Activate a scene by UUID.\"\"\"\n    headers = {\n        \"accept\": \"application/json\",\n        \"content-type\": \"application/json\",\n    }\n\n    payload = {\n        \"duration\": duration,\n        \"ignore\": ignore if ignore is not None else [],\n        \"fast\": fast,\n    }\n\n    async with httpx.AsyncClient(auth=self._auth_token, timeout=TIMEOUT) as client:\n        resp = await client.put(f\"{LIFX_URL}/scene_id:{scene_uuid}/activate\", json=payload, headers=headers)\n        results: list[dict[str, str]] = []\n\n        try:\n            resp.raise_for_status()\n            if fast:\n                return None\n            results = resp.json().get(\"results\", None)\n\n        except httpx.HTTPStatusError as exc:\n            _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n\n        return results\n</code></pre>"},{"location":"modules/#asyncio_lifx_scenes.scenes.LifxCloud.async_list_scenes","title":"<code>async_list_scenes()</code>  <code>async</code>","text":"<p>Asynchronously return a list of scenes stored on LIFX Cloud.</p> Source code in <code>src/asyncio_lifx_scenes/scenes.py</code> <pre><code>async def async_list_scenes(self) -&gt; list[LifxScene]:\n    \"\"\"Asynchronously return a list of scenes stored on LIFX Cloud.\"\"\"\n    header = {\"accept\": \"application/json\"}\n    async with httpx.AsyncClient(auth=self._auth_token, timeout=TIMEOUT) as client:\n        resp = await client.get(LIFX_URL, headers=header)\n        try:\n            resp.raise_for_status()\n            for scene in resp.json():\n                self.scenes.append(LifxScene(**scene))\n        except httpx.HTTPStatusError as exc:\n            _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n            return []\n        else:\n            return self.scenes\n</code></pre>"},{"location":"modules/#asyncio_lifx_scenes.scenes.LifxCloud.list_scenes","title":"<code>list_scenes()</code>","text":"<p>Return a list of scenes stored on LIFX Cloud.</p> Source code in <code>src/asyncio_lifx_scenes/scenes.py</code> <pre><code>def list_scenes(self) -&gt; list[LifxScene]:\n    \"\"\"Return a list of scenes stored on LIFX Cloud.\"\"\"\n    header = {\"accept\": \"application/json\"}\n\n    with httpx.Client(auth=self._auth_token, timeout=TIMEOUT) as client:\n        resp = client.get(LIFX_URL, headers=header)\n        try:\n            resp.raise_for_status()\n            for scene in resp.json():\n                self.scenes.append(LifxScene(**scene))\n        except httpx.HTTPStatusError as exc:\n            _LOGGER.exception(\"Error response %s from %s\", exc.response.status_code, exc.request.url)\n            return []\n        else:\n            return self.scenes\n</code></pre>"}]}